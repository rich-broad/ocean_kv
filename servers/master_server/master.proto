// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax="proto2";
package ocean_kv.master;

option cc_generic_services = true;

// data server调该接口
message AllocFileIdRequest {
      required uint32 file_id = 1; //希望分配的文件id, 可以不填，如果不填,则master分配一个可用的文件id
};

message AllocFileIdResponse {
      required uint32 code = 1;
      required uint32 file_id = 2;
};

message GetAllFileIdsRequest {
      required string page_context = 1; // 分页上下文
      required uint32 page_size = 2; // 每次多少个
};

message GetAllFileIdsResponse {
      required uint32 code = 1;
      repeated uint32 file_ids = 2;
      required bool has_next = 3; // 有没有下一页
      required string page_context = 4; // 分页上下文
};

message LockClusterRequest {

};

message LockClusterResponse {
      required uint32 code = 1;// 0--成功
};

message UnLockClusterRequest {

};

message UnLockClusterResponse {
      required uint32 code = 1;// 0--成功
};

message HeartBeatRequest {
      required string server_name = 1;
};

message HeartBeatResponse {
      required uint32 code = 1;// 0--成功
};


service MasterService {
      rpc AllocFileId(AllocFileIdRequest) returns (AllocFileIdResponse);
      rpc GetAllFileIds(GetAllFileIdsRequest) returns (GetAllFileIdsResponse);
      rpc LockCluster(LockClusterRequest) returns (LockClusterResponse);
      rpc UnLockCluster(UnLockClusterRequest) returns (UnLockClusterResponse);
      rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse);
};
